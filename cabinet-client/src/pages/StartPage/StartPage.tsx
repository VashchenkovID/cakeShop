import React, { useEffect, useState } from "react";
import styles from "./StartPage.module.styl";
import useRequest from "../../hooks/useRequest";
import cakesApi from "../../api/requests/cakesApi";
import Carousel, { arrowsPlugin } from "@brainhubeu/react-carousel";
import "@brainhubeu/react-carousel/lib/style.css";
import { Button } from "@consta/uikit/Button";
import { IconArrowLeft } from "@consta/uikit/IconArrowLeft";
import { IconArrowRight } from "@consta/uikit/IconArrowRight";
import { Text } from "@consta/uikit/Text";
import ComponentStyleWrapper from "../../components/ComponentStyleWrapper/ComponentStyleWrapper";
import { useResize } from "../../hooks/useResize";
import { DeviceListModel } from "../../api/models/DeviceListModel";
import CatalogItem from "../Catalog/CatalogItem/CatalogItem";
import { TypeModel } from "../../api/models/TypeModel";
import { useNavigate } from "react-router-dom";
import { PublicRoutesEnum } from "../../utils/enum";

interface IComponentProps {}

const StartPage: React.FC<IComponentProps> = () => {
  const navigate = useNavigate();
  const { width } = useResize();
  const [items, setItems] = useState<{
    items: { [key: string]: Array<DeviceListModel> };
    types: TypeModel[];
  } | null>(null);
  const { load: fetchStart } = useRequest(cakesApi.getStart, (data) => {
    setItems(data?.data || []);
  });

  useEffect(() => {
    fetchStart();
  }, []);
  return (
    <section className={styles.container}>
      <ComponentStyleWrapper>
        <Carousel
          plugins={[
            {
              resolve: arrowsPlugin,
              options: {
                arrowLeft: <Button iconLeft={IconArrowLeft} view={"clear"} />,
                arrowLeftDisabled: (
                  <Button iconLeft={IconArrowLeft} view={"clear"} />
                ),
                arrowRight: <Button iconLeft={IconArrowRight} view={"clear"} />,
                arrowRightDisabled: (
                  <Button iconLeft={IconArrowRight} view={"clear"} />
                ),
                addArrowClickHandler: true,
              },
            },
          ]}
        >
          <div className={styles.container__slide}>
            <Text align={"center"} size={width >= 800 ? "5xl" : "3xl"}>
              Kassandra's Cake
            </Text>
            <Text size={width >= 800 ? "m" : "s"} align={"center"}>
              –ú–∞–≥–∞–∑–∏–Ω –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏—Ö –∏–∑–¥–µ–ª–∏–π
            </Text>
            <div className={styles.container__slide__actions}>
              <Button
                label={"–í—ã–±—Ä–∞—Ç—å –¥–µ—Å–µ—Ä—Ç"}
                size={"s"}
                onClick={() => navigate(`${PublicRoutesEnum.SHOP}`)}
              />
              <Button
                label={"–ó–∞–∫–∞–∑–∞—Ç—å –¥–µ—Å–µ—Ä—Ç –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É –∑–∞–∫–∞–∑—É"}
                size={"s"}
                onClick={() => navigate(`${PublicRoutesEnum.INDIVIDUAL}`)}
              />
            </div>
          </div>
          <div className={styles.container__slide}>
            <Text>
              <Text>–ü—Ä–∏–≤–µ—Ç!</Text>
              <Text>
                –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –∏ —è –¥–æ–º–∞—à–Ω–∏–π –∫–æ–Ω–¥–∏—Ç–µ—Ä —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
                ¬´–ò–Ω–∂–µ–Ω–µ—Ä-—Ç–µ—Ö–Ω–æ–ª–æ–≥ –ø–∏—â–µ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏¬ªüë©üèº‚Äçüç≥üßëüèº‚Äçüîß
              </Text>
              <Text>
                –ñ–∏–≤—É –∏ —Ä–∞–±–æ—Ç–∞—é –≤ –°–º–æ–ª–µ–Ω—Å–∫–µ üèô –ì–æ—Ç–æ–≤–ª—é —Ç–æ—Ä—Ç—ã, –∫–∞–ø–∫–µ–π–∫–∏ –∏ –¥—Ä—É–≥–∏–µ
                –¥–µ—Å–µ—Ä—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑ üç∞üßÅ –°–æ–∑–¥–∞—é –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ –∏ –∫–æ–Ω—Ñ–µ—Ç—ã üç´üç≠
              </Text>
            </Text>
          </div>
        </Carousel>
      </ComponentStyleWrapper>
      <div className={styles.container__deviceSection}>
        <Text className={styles.container__deviceSection__line} size={"3xl"}>
          –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        </Text>
        <div className={styles.container__deviceSection__types}>
          {items &&
            items.types.length > 0 &&
            items.types.map((type) => (
              <ComponentStyleWrapper key={type.id}>
                <Text cursor={"pointer"} align={"center"}>
                  {type.name}
                </Text>
              </ComponentStyleWrapper>
            ))}
        </div>
      </div>
      <div className={styles.container__deviceSection}>
        <Text className={styles.container__deviceSection__line} size={"3xl"}>
          –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ—Å–µ—Ä—Ç—ã
        </Text>
        {items &&
          Object.keys(items.items).map((key) => (
            <div className={styles.container__deviceSection__underSection}>
              <Text size={"2xl"}>{key}</Text>
              <div className={styles.container__deviceSection__items}>
                {items.items[key] &&
                  items.items[key].map((item) => (
                    <CatalogItem item={item} key={`${item.id}`} />
                  ))}
              </div>
            </div>
          ))}
      </div>
    </section>
  );
};

export default React.memo(StartPage);
